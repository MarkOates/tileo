<!DOCTYPE html>
<head>
<style>
*
{
  font-family: 'Arial';
  padding: 3px 20px;
}
table td
{
  padding: 3px 20px;
}
.property
{
  color: blue;
}
.private_property
{
  color: lightblue;
}

.method
{
  color: red;
}

.private_method
{
  color: pink;
}

.dependency
{
  color: green;
}

.component
{
  padding: 20 10 20 10;
  margin: 20 10 20 10;
  background-color: #dfdfdf;
}

.component h3
{
}
</style>
</head>
<body>
<h1>TOC</h1>
<ul>
  <li><a href="#quintessence/Tileo/MeshWithNormals.q.yml">quintessence/Tileo/MeshWithNormals.q.yml</a></li>
  <li><a href="#quintessence/Tileo/TMJDataLoader.q.yml">quintessence/Tileo/TMJDataLoader.q.yml</a></li>
  <li><a href="#quintessence/Tileo/TMJMeshLoader.q.yml">quintessence/Tileo/TMJMeshLoader.q.yml</a></li>
  <li><a href="#quintessence/Tileo/TileIndexInfo.q.yml">quintessence/Tileo/TileIndexInfo.q.yml</a></li>
  <li><a href="#quintessence/Tileo/TileoTileVertexAllegroVertexDeclaration.q.yml">quintessence/Tileo/TileoTileVertexAllegroVertexDeclaration.q.yml</a></li>
</ul>
<h1>Components</h1>
<ul>
  <div class="component">
    <h3 id="quintessence/Tileo/MeshWithNormals.q.yml">quintessence/Tileo/MeshWithNormals.q.yml</h3>
     <table>
<tr>
  <td class="property">tileo_tile_vertex_allegro_vertex_declaration</td>
  <td class="property">Tileo::TileoTileVertexAllegroVertexDeclaration</td>
</tr>
<tr>
  <td class="property">num_columns</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">num_rows</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">tile_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">tile_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">tile_ids</td>
  <td class="property">std::vector&lt;int&gt;</td>
</tr>
<tr>
  <td class="property">normal_tile_ids</td>
  <td class="property">std::vector&lt;int&gt;</td>
</tr>
<tr>
  <td class="property">vertexes</td>
  <td class="property">std::vector&lt;TILEO_TILE_VERTEX&gt;</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">resize(2)</td>
</tr>
<tr>
  <td class="private_method">clear_and_reserve()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Tileo::TileoTileVertexAllegroVertexDeclaration&quot;, &quot;headers&quot;=&gt;[&quot;Tileo/TileoTileVertexAllegroVertexDeclaration.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;TILEO_TILE_VERTEX&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;Tileo/TileoTileVertex.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Tileo/TMJDataLoader.q.yml">quintessence/Tileo/TMJDataLoader.q.yml</h3>
     <table>
<tr>
  <td class="property">filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">num_columns</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">num_rows</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">tile_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">tile_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">layer_num_columns</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">layer_num_rows</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">layer_tile_data</td>
  <td class="property">std::vector&lt;int&gt;</td>
</tr>
<tr>
  <td class="property">collision_layer_num_columns</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">collision_layer_num_rows</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">collision_layer_tile_data</td>
  <td class="property">std::vector&lt;int&gt;</td>
</tr>
<tr>
  <td class="property">loaded</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">get_num_columns()</td>
</tr>
<tr>
  <td class="method">get_num_rows()</td>
</tr>
<tr>
  <td class="method">get_tile_width()</td>
</tr>
<tr>
  <td class="method">get_tile_height()</td>
</tr>
<tr>
  <td class="method">get_layer_num_columns()</td>
</tr>
<tr>
  <td class="method">get_layer_num_rows()</td>
</tr>
<tr>
  <td class="method">get_layer_tile_data()</td>
</tr>
<tr>
  <td class="method">get_collision_layer_num_columns()</td>
</tr>
<tr>
  <td class="method">get_collision_layer_num_rows()</td>
</tr>
<tr>
  <td class="method">get_collision_layer_tile_data()</td>
</tr>
<tr>
  <td class="method">load()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::FileExistenceChecker&quot;, &quot;headers&quot;=&gt;[&quot;Blast/FileExistenceChecker.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::stringstream&quot;, &quot;headers&quot;=&gt;[&quot;sstream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::ifstream&quot;, &quot;headers&quot;=&gt;[&quot;fstream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;nlohmann::json&quot;, &quot;headers&quot;=&gt;[&quot;lib/nlohmann/json.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;int&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Tileo/TMJMeshLoader.q.yml">quintessence/Tileo/TMJMeshLoader.q.yml</h3>
     <table>
<tr>
  <td class="property">BITMAP_ATLAS_FILENAME</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">tmj_filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">tile_atlas</td>
  <td class="property">Tileo::Atlas*</td>
</tr>
<tr>
  <td class="property">mesh</td>
  <td class="property">Tileo::Mesh*</td>
</tr>
<tr>
  <td class="property">collision_tile_map</td>
  <td class="property">Tileo::TileMap*</td>
</tr>
<tr>
  <td class="property">loaded</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">get_tile_atlas()</td>
</tr>
<tr>
  <td class="method">get_mesh()</td>
</tr>
<tr>
  <td class="method">get_collision_tile_map()</td>
</tr>
<tr>
  <td class="method">load()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ifstream&quot;, &quot;headers&quot;=&gt;[&quot;fstream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;nlohmann::json&quot;, &quot;headers&quot;=&gt;[&quot;lib/nlohmann/json.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Tileo::Atlas*&quot;, &quot;headers&quot;=&gt;[&quot;Tileo/Atlas.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Tileo::Mesh*&quot;, &quot;headers&quot;=&gt;[&quot;Tileo/Mesh.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Tileo::TileMap*&quot;, &quot;headers&quot;=&gt;[&quot;Tileo/TileMap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Tileo::TileAtlasBuilder&quot;, &quot;headers&quot;=&gt;[&quot;Tileo/TileAtlasBuilder.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Tileo::TMJDataLoader&quot;, &quot;headers&quot;=&gt;[&quot;Tileo/TMJDataLoader.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Tileo/TileIndexInfo.q.yml">quintessence/Tileo/TileIndexInfo.q.yml</h3>
     <table>
<tr>
  <td class="property">index_num</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">bitmap_source</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
<tr>
  <td class="property">sub_bitmap</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
<tr>
  <td class="property">u1</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">v1</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">u2</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">v2</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Tileo/TileoTileVertexAllegroVertexDeclaration.q.yml">quintessence/Tileo/TileoTileVertexAllegroVertexDeclaration.q.yml</h3>
     <table>
<tr>
  <td class="property">vertex_declaration</td>
  <td class="property">ALLEGRO_VERTEX_DECL*</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">destroyed</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">get_vertex_declaration()</td>
</tr>
<tr>
  <td class="method">build_empty_vertex()</td>
</tr>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">destroy()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_VERTEX_DECL*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;TILEO_TILE_VERTEX&quot;, &quot;headers&quot;=&gt;[&quot;Tileo/TileoTileVertex.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<h1>Dependents</h1>
<pre>
{
  "Tileo/TileoTileVertexAllegroVertexDeclaration": [
    "Tileo/MeshWithNormals"
  ],
  "std/vector<TILEO_TILE_VERTEX>": [
    "Tileo/MeshWithNormals"
  ],
  "Blast/FileExistenceChecker": [
    "Tileo/TMJDataLoader"
  ],
  "std/stringstream": [
    "Tileo/TMJDataLoader"
  ],
  "std/ifstream": [
    "Tileo/TMJDataLoader"
  ],
  "nlohmann/json": [
    "Tileo/TMJDataLoader",
    "Tileo/TMJMeshLoader"
  ],
  "std/vector<int>": [
    "Tileo/TMJDataLoader"
  ],
  "ifstream": [
    "Tileo/TMJMeshLoader"
  ],
  "AllegroFlare/BitmapBin": [
    "Tileo/TMJMeshLoader"
  ],
  "Tileo/Atlas": [
    "Tileo/TMJMeshLoader"
  ],
  "Tileo/Mesh": [
    "Tileo/TMJMeshLoader"
  ],
  "Tileo/TileMap": [
    "Tileo/TMJMeshLoader"
  ],
  "Tileo/TileAtlasBuilder": [
    "Tileo/TMJMeshLoader"
  ],
  "Tileo/TMJDataLoader": [
    "Tileo/TMJMeshLoader"
  ],
  "ALLEGRO_BITMAP": [
    "Tileo/TileIndexInfo"
  ],
  "ALLEGRO_VERTEX_DECL": [
    "Tileo/TileoTileVertexAllegroVertexDeclaration"
  ],
  "al_is_system_installed": [
    "Tileo/TileoTileVertexAllegroVertexDeclaration"
  ],
  "al_is_primitives_addon_initialized": [
    "Tileo/TileoTileVertexAllegroVertexDeclaration"
  ],
  "TILEO_TILE_VERTEX": [
    "Tileo/TileoTileVertexAllegroVertexDeclaration"
  ]
}
</pre>
</body>