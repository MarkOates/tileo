properties:


  - name: bitmap_bin
    type: AllegroFlare::BitmapBin*
    init_with: nullptr
    constructor_arg: true

  - name: tile_atlas
    type: Tileo::Atlas*
    init_with: nullptr
    constructor_arg: true

  - name: filename
    type: std::string
    init_with: '"filename-not-set.tmj"'
    constructor_arg: true


functions:


  - name: create_mesh
    type: Tileo::Mesh*
    guards: [ bitmap_bin, tile_atlas ]
    body: |
      // 1
      // load and validate the json data to variables
      std::ifstream i(filename);
      nlohmann::json j;
      i >> j;

      int tmx_height = j["height"];// get height
      int tmx_width = j["width"];// get width
      // get first j["layers"] that is a ["type"] == "tilelayer"
      //   - get ["width"]
      //   - get ["height"]
      //   - get ["data"]
      // validate widths and heights match

      // get tilewidth
      // get tileheight
      // validate tileheight and tilewidth == 16

      // 2
      // create the atlas
      int tile_width = 16;
      int tile_height = 16;

      std::string bitmap_filename = "tiles_dungeon_v1.1.png";
      ALLEGRO_BITMAP *tile_map_bitmap = bitmap_bin->operator[](bitmap_filename);
      tile_atlas->set_bitmap_filename(bitmap_filename);

      bool scaled_and_extruded = true;
      if (scaled_and_extruded)
      {
         int scale = 3;
         ALLEGRO_BITMAP *scaled_extruded_tile_map_bitmap =
            TileAtlasBuilder::build_scaled_and_extruded(tile_map_bitmap, scale);
         al_save_bitmap("/Users/markoates/Desktop/whatever.png", scaled_extruded_tile_map_bitmap);
         tile_atlas->duplicate_bitmap_and_load(scaled_extruded_tile_map_bitmap, tile_width*scale, tile_height*scale, 1);
      }
      else
      {
         tile_atlas->duplicate_bitmap_and_load(tile_map_bitmap, tile_width, tile_height);
      }

      // 3
      // create the mesh
      int width = tmx_width;
      int height = tmx_height;
      Tileo::Mesh* mesh = new Tileo::Mesh(tile_atlas, width, height, tile_width, tile_height);
      mesh->initialize();

      // 4
      // return the mesh
      return mesh;
    body_dependency_symbols:
      - Tileo::TileAtlasBuilder
      - nlohmann::json
      - ifstream


dependencies:


  - symbol: ifstream
    headers: [ fstream ]
  - symbol: nlohmann::json
    headers: [ lib/nlohmann/json.hpp ]
  - symbol: AllegroFlare::BitmapBin*
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: Tileo::Atlas*
    headers: [ Tileo/Atlas.hpp ]
  - symbol: Tileo::Mesh*
    headers: [ Tileo/Mesh.hpp ]
  - symbol: Tileo::TileAtlasBuilder
    headers: [ Tileo/TileAtlasBuilder.hpp ]


