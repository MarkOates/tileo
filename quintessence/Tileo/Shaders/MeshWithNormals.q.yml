parent_classes:


  - class: Tileo::Shaders::Base
    scope: private
    init_with: "obtain_vertex_source(), obtain_fragment_source()"


properties:


  - name: initialized
    type: bool
    init_with: false


functions:


  - name: initialize
    type: void
    body: |
      if (!initialized) Tileo::Shaders::Base::initialize();
      initialized = true;


  - name: activate
    type: void
    guards: [ initialized ]
    body: |
      Tileo::Shaders::Base::activate();


  - name: set_flat_color
    parameters:
      - name: flat_color
        type: ALLEGRO_COLOR
        default_argument: "{}"
      - name: intensity
        type: float
        default_argument: 1.0f
    body: |
      Shader::set_vec3("tint", flat_color.r, flat_color.g, flat_color.b);
      Shader::set_float("tint_intensity", intensity);
      return;


  - name: set_normal_texture
    parameters:
      - name: normal_texture_bitmap
        type: ALLEGRO_BITMAP*
        default_argument: nullptr
    body: |
      Shader::set_sampler("normal_texture", normal_texture_bitmap, 2);
      return;


  - name: obtain_vertex_source
    type: std::string
    static: true
    private: true
    body: |
      static const std::string source = R"DELIM(
        attribute vec4 al_pos;
        attribute vec4 al_color;
        attribute vec2 al_texcoord;
        uniform mat4 al_projview_matrix;
        uniform bool al_use_tex_matrix;
        uniform mat4 al_tex_matrix;
        varying vec4 varying_color;
        varying vec2 varying_texcoord;

        // normals logic:
        //attribute vec2 normal_texcoord; // analagous to al_texcoord
        //varying vec2 varying_normal_texcoord; // analagous to varying_texcoord

        void main()
        {
          varying_color = al_color;
          if (al_use_tex_matrix)
          {
            vec4 uv = al_tex_matrix * vec4(al_texcoord, 0, 1);
            varying_texcoord = vec2(uv.x, uv.y);

            // normals logic:
            //vec4 normal_uv = al_tex_matrix * vec4(normal_texcoord, 0, 1);
            //varying_normal_texcoord = vec2(normal_uv.x, normal_uv.y);
          }
          else
          {
            varying_texcoord = al_texcoord;
          }
          gl_Position = al_projview_matrix * al_pos;
        }
      )DELIM";
      return source;


  - name: obtain_fragment_source
    type: std::string
    static: true
    private: true
    body: |
      static const std::string source = R"DELIM(
        #ifdef GL_ES
        precision lowp float;
        #endif
        uniform sampler2D al_tex;
        uniform bool al_use_tex;
        uniform bool al_alpha_test;
        uniform int al_alpha_func;
        uniform float al_alpha_test_val;
        varying vec4 varying_color;
        varying vec2 varying_texcoord;
        uniform float tint_intensity;
        uniform vec3 tint;

        // normals logic:
        uniform sampler2D normal_texture; // analagous to al_tex
        varying vec2 varying_normal_texcoord; // analagous to varying_texcoord

        bool alpha_test_func(float x, int op, float compare);
        void alter_by_tint(inout vec4 color);

        void main()
        {
          vec4 c;
          if (al_use_tex)
            c = varying_color * texture2D(al_tex, varying_texcoord);
            //c = varying_color * texture2D(normal_texture, varying_texcoord);
            //c = varying_color * texture2D(normal_texture, varying_normal_texcoord);
          else
            c = varying_color;
          if (!al_alpha_test || alpha_test_func(c.a, al_alpha_func, al_alpha_test_val))
            gl_FragColor = alter_by_tint(c);
          else
            discard;
        }

        bool alpha_test_func(float x, int op, float compare)
        {
          if (op == 0) return false;
          else if (op == 1) return true;
          else if (op == 2) return x < compare;
          else if (op == 3) return x == compare;
          else if (op == 4) return x <= compare;
          else if (op == 5) return x > compare;
          else if (op == 6) return x != compare;
          else if (op == 7) return x >= compare;
          return false;
        }

        void alter_by_tint(inout vec4 color)
        {
           float inverse_tint_intensity = 1.0 - tint_intensity;
           color.r = (color.r * inverse_tint_intensity + tint.r * tint_intensity) * color.a;
           color.g = (color.g * inverse_tint_intensity + tint.g * tint_intensity) * color.a;
           color.b = (color.b * inverse_tint_intensity + tint.b * tint_intensity) * color.a;
           color.a = color.a;
        }

      )DELIM";
      return source;


dependencies:


  - symbol: Tileo::Shaders::Base
    headers: [ Tileo/Shaders/Base.hpp ]
  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_BITMAP*
    headers: [ allegro5/allegro.h ]


